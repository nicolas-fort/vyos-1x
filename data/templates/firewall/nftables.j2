#!/usr/sbin/nft -f

{% import 'firewall/nftables-defines.j2' as group_tmpl %}
{% import 'firewall/nftables-zone.j2' as zone_tmpl %}

{% if first_install is not vyos_defined %}
delete table ip vyos_filter
{% endif %}
table ip vyos_filter {
    # firewall ip forward filter entries
{% if ip is vyos_defined %}
{%     if ip.forward is vyos_defined %}
{%         set ns = namespace(sets=[]) %}
{%         for prior, conf in ip.forward.items() %}
    chain VYOS_FORWARD_{{ prior }} {
        type filter hook forward priority {{ prior }}; policy accept;
{%             if state_policy is vyos_defined %}
        jump VYOS_STATE_POLICY
{%             endif %}        
{%             if conf.rule is vyos_defined %}
{%                 for rule_id, rule_conf in conf.rule.items() if rule_conf.disable is not vyos_defined %}
            {{ rule_conf | nft_rule('FWD', prior, rule_id) }}
{%                     if rule_conf.recent is vyos_defined %}
{%                         set ns.sets = ns.sets + ['FWD_' + prior + '_' + rule_id] %}
{%                     endif %}
{%                 endfor %}
{%             endif %}
            {{ conf | nft_default_rule(prior) }}
            # jump VYOS_POST_FW
    }
{%         endfor %}

{%         for set_name in ip_fqdn %}
    set FQDN_{{ set_name }} {
        type ipv4_addr
        flags interval
    }
{%         endfor %}
{%         for set_name in ns.sets %}
    set RECENT_{{ set_name }} {
        type ipv4_addr
        size 65535
        flags dynamic
    }
{%         endfor %}
{%         if geoip_updated.name is vyos_defined %}
{%             for setname in geoip_updated.name %}
    set {{ setname }} {
        type ipv4_addr
        flags interval
    }
{%             endfor %}
{%         endif %}
{%     endif %}

{%     if ip.input is vyos_defined %}
{%         set ns = namespace(sets=[]) %}
{%         for prior, conf in ip.input.items() %}
    chain VYOS_INPUT_{{ prior }} {
        type filter hook input priority {{ prior }}; policy accept;
{%             if state_policy is vyos_defined %}
        jump VYOS_STATE_POLICY
{%             endif %}        
{%             if conf.rule is vyos_defined %}
{%                 for rule_id, rule_conf in conf.rule.items() if rule_conf.disable is not vyos_defined %}
            {{ rule_conf | nft_rule('INP',prior, rule_id) }}
{%                     if rule_conf.recent is vyos_defined %}
{%                         set ns.sets = ns.sets + ['INP_' + prior + '_' + rule_id] %}
{%                     endif %}
{%                 endfor %}
{%             endif %}
            {{ conf | nft_default_rule(prior) }}
            # jump VYOS_POST_FW
    }
{%         endfor %}
{%         for set_name in ip_fqdn %}
    set FQDN_{{ set_name }} {
        type ipv4_addr
        flags interval
    }
{%         endfor %}
{%         for set_name in ns.sets %}
    set RECENT_{{ set_name }} {
        type ipv4_addr
        size 65535
        flags dynamic
    }
{%         endfor %}
{%         if geoip_updated.name is vyos_defined %}
{%             for setname in geoip_updated.name %}
    set {{ setname }} {
        type ipv4_addr
        flags interval
    }
{%             endfor %}
{%         endif %}
{%     endif %}

{%     if ip.output is vyos_defined %}
{%         set ns = namespace(sets=[]) %}
{%         for prior, conf in ip.output.items() %}
    chain VYOS_OUTPUT_{{ prior }} {
        type filter hook output priority {{ prior }}; policy accept;
{%             if state_policy is vyos_defined %}
        jump VYOS_STATE_POLICY
{%             endif %}        
{%             if conf.rule is vyos_defined %}
{%                 for rule_id, rule_conf in conf.rule.items() if rule_conf.disable is not vyos_defined %}
            {{ rule_conf | nft_rule('OUT', prior, rule_id) }}
{%                     if rule_conf.recent is vyos_defined %}
{%                         set ns.sets = ns.sets + ['OUT_' + prior + '_' + rule_id] %}
{%                     endif %}
{%                 endfor %}
{%             endif %}
            {{ conf | nft_default_rule(prior) }}
            # jump VYOS_POST_FW
    }
{%         endfor %}
{%         for set_name in ip_fqdn %}
    set FQDN_{{ set_name }} {
        type ipv4_addr
        flags interval
    }
{%         endfor %}
{%         for set_name in ns.sets %}
    set RECENT_{{ set_name }} {
        type ipv4_addr
        size 65535
        flags dynamic
    }
{%         endfor %}
{%         if geoip_updated.name is vyos_defined %}
{%             for setname in geoip_updated.name %}
    set {{ setname }} {
        type ipv4_addr
        flags interval
    }
{%             endfor %}
{%         endif %}

{%     endif %}

    chain VYOS_FRAG_MARK {
        type filter hook prerouting priority -450; policy accept;
        ip frag-off & 0x3fff != 0 meta mark set 0xffff1 return
    }

{%     if ip.prerouting is vyos_defined %}
{%         set ns = namespace(sets=[]) %}
{%         for prior, conf in ip.prerouting.items() %}
    chain VYOS_PREROUTING_{{ prior }} {
        type filter hook prerouting priority {{ prior }}; policy accept;
{%             if state_policy is vyos_defined %}
        ## jump VYOS_STATE_POLICY
{%             endif %}
{%             if conf.rule is vyos_defined %}
{%                 for rule_id, rule_conf in conf.rule.items() if rule_conf.disable is not vyos_defined %}
            {{ rule_conf | nft_rule('PRE', prior, rule_id) }}
{%                     if rule_conf.recent is vyos_defined %}
{%                         set ns.sets = ns.sets + ['PRE_' + prior + '_' + rule_id] %}
{%                     endif %}
{%                 endfor %}
{%             endif %}
            {{ conf | nft_default_rule(prior) }}
            # jump VYOS_POST_FW
    }
{%         endfor %}
{%         for set_name in ip_fqdn %}
    set FQDN_{{ set_name }} {
        type ipv4_addr
        flags interval
    }
{%         endfor %}
{%         for set_name in ns.sets %}
    set RECENT_{{ set_name }} {
        type ipv4_addr
        size 65535
        flags dynamic
    }
{%         endfor %}
{%         if geoip_updated.name is vyos_defined %}
{%             for setname in geoip_updated.name %}
    set {{ setname }} {
        type ipv4_addr
        flags interval
    }
{%             endfor %}
{%         endif %}

{%     endif %}

{%     if ip.name is vyos_defined %}
{%         set ns = namespace(sets=[]) %}
{%         for name_text, conf in ip.name.items() %}
    chain NAME_{{ name_text }} {
{%             if conf.rule is vyos_defined %}
{%                 for rule_id, rule_conf in conf.rule.items() if rule_conf.disable is not vyos_defined %}
        {{ rule_conf | nft_rule('NAM', name_text, rule_id) }}
{%                     if rule_conf.recent is vyos_defined %}
{%                         set ns.sets = ns.sets + ['NAM_' + name_text + '_' + rule_id] %}
{%                     endif %}
{%                 endfor %}
{%             endif %}
        {{ conf | nft_default_rule(name_text) }}
    }
{%         endfor %}
{%         for set_name in ip_fqdn %}
    set FQDN_{{ set_name }} {
        type ipv4_addr
        flags interval
    }
{%         endfor %}
{%         for set_name in ns.sets %}
    set RECENT_{{ set_name }} {
        type ipv4_addr
        size 65535
        flags dynamic
    }
{%         endfor %}
{%         if geoip_updated.name is vyos_defined %}
{%             for setname in geoip_updated.name %}
    set {{ setname }} {
        type ipv4_addr
        flags interval
    }
{%             endfor %}
{%         endif %}
{%     endif %}
{% endif %}

{{ group_tmpl.groups(group, False) }}

{% if zone is vyos_defined %}
{{ zone_tmpl.zone_chains(zone, state_policy is vyos_defined, False) }}
{% endif %}

{% if state_policy is vyos_defined %}
    chain VYOS_STATE_POLICY {
{%     if state_policy.established is vyos_defined %}
        {{ state_policy.established | nft_state_policy('established') }}
{%     endif %}
{%     if state_policy.invalid is vyos_defined %}
        {{ state_policy.invalid | nft_state_policy('invalid') }}
{%     endif %}
{%     if state_policy.related is vyos_defined %}
        {{ state_policy.related | nft_state_policy('related') }}
{%     endif %}
        return
    }
{% endif %}
}

{% if first_install is not vyos_defined %}
delete table ip6 vyos_filter
{% endif %}
table ip6 vyos_filter {
    # firewall ipv6 forward filter entries
{% if ipv6 is vyos_defined %}
{%     if ipv6.forward is vyos_defined %}
{%         set ns = namespace(sets=[]) %}
{%         for prior, conf in ipv6.forward.items() %}
    chain VYOS_IPV6_FORWARD_{{ prior }} {
        type filter hook forward priority {{ prior }}; policy accept;
{%             if state_policy is vyos_defined %}
        jump VYOS_STATE_POLICY6
{%             endif %}        
{%             if conf.rule is vyos_defined %}
{%                 for rule_id, rule_conf in conf.rule.items() if rule_conf.disable is not vyos_defined %}
            {{ rule_conf | nft_rule('FWD', prior, rule_id ,'ip6') }}
{%                     if rule_conf.recent is vyos_defined %}
{%                         set ns.sets = ns.sets + ['FWD_' + prior + '_' + rule_id] %}
{%                     endif %}
{%                 endfor %}
{%             endif %}
            {{ conf | nft_default_rule(prior, ipv6=True) }}
            # jump VYOS_POST_FW
    }
{%         endfor %}
{%         for set_name in ip6_fqdn %}
    set FQDN_{{ set_name }} {
        type ipv6_addr
        flags interval
    }
{%         endfor %}
{%         for set_name in ns.sets %}
    set RECENT6_{{ set_name }} {
        type ipv6_addr
        size 65535
        flags dynamic
    }
{%         endfor %}
{%         if geoip_updated.ipv6_name is vyos_defined %}
{%             for setname in geoip_updated.ipv6_name %}
    set {{ setname }} {
        type ipv6_addr
        flags interval
    }
{%             endfor %}
{%         endif %}
{%     endif %}

{%     if ipv6.input is vyos_defined %}
{%         set ns = namespace(sets=[]) %}
{%         for prior, conf in ipv6.input.items() %}
    chain VYOS_IPV6_INPUT_{{ prior }} {
        type filter hook input priority {{ prior }}; policy accept;
{%             if state_policy is vyos_defined %}
        jump VYOS_STATE_POLICY6
{%             endif %}        
{%             if conf.rule is vyos_defined %}
{%                 for rule_id, rule_conf in conf.rule.items() if rule_conf.disable is not vyos_defined %}
            {{ rule_conf | nft_rule('INP', prior, rule_id ,'ip6') }}
{%                     if rule_conf.recent is vyos_defined %}
{%                         set ns.sets = ns.sets + ['INP_' + prior + '_' + rule_id] %}
{%                     endif %}
{%                 endfor %}
{%             endif %}
            {{ conf | nft_default_rule(prior, ipv6=True) }}
            # jump VYOS_POST_FW
    }
{%         endfor %}
{%         for set_name in ip6_fqdn %}
    set FQDN_{{ set_name }} {
        type ipv6_addr
        flags interval
    }
{%         endfor %}
{%         for set_name in ns.sets %}
    set RECENT6_{{ set_name }} {
        type ipv6_addr
        size 65535
        flags dynamic
    }
{%         endfor %}
{%         if geoip_updated.ipv6_name is vyos_defined %}
{%             for setname in geoip_updated.ipv6_name %}
    set {{ setname }} {
        type ipv6_addr
        flags interval
    }
{%             endfor %}
{%         endif %}
{%     endif %}

{%     if ipv6.output is vyos_defined %}
{%         set ns = namespace(sets=[]) %}
{%         for prior, conf in ipv6.output.items() %}
    chain VYOS_IPV6_OUTPUT_{{ prior }} {
        type filter hook output priority {{ prior }}; policy accept;
{%             if state_policy is vyos_defined %}
        jump VYOS_STATE_POLICY6
{%             endif %}        
{%             if conf.rule is vyos_defined %}
{%                 for rule_id, rule_conf in conf.rule.items() if rule_conf.disable is not vyos_defined %}
            {{ rule_conf | nft_rule('OUT', prior, rule_id ,'ip6') }}
{%                     if rule_conf.recent is vyos_defined %}
{%                         set ns.sets = ns.sets + ['OUT_ ' + prior + '_' + rule_id] %}
{%                     endif %}
{%                 endfor %}
{%             endif %}
            {{ conf | nft_default_rule(prior, ipv6=True) }}
            # jump VYOS_POST_FW
    }
{%         endfor %}
{%         for set_name in ip6_fqdn %}
    set FQDN_{{ set_name }} {
        type ipv6_addr
        flags interval
    }
{%         endfor %}
{%         for set_name in ns.sets %}
    set RECENT6_{{ set_name }} {
        type ipv6_addr
        size 65535
        flags dynamic
    }
{%         endfor %}
{%         if geoip_updated.ipv6_name is vyos_defined %}
{%             for setname in geoip_updated.ipv6_name %}
    set {{ setname }} {
        type ipv6_addr
        flags interval
    }
{%             endfor %}
{%         endif %}
{%     endif %}
    chain VYOS_FRAG6_MARK {
        type filter hook prerouting priority -450; policy accept;
        exthdr frag exists meta mark set 0xffff1 return
    }

{%     if ipv6.ipv6_name is vyos_defined %}
{%         set ns = namespace(sets=[]) %}
{%         for name_text, conf in ipv6.ipv6_name.items() %}
    chain NAME6_{{ name_text }} {
{%             if conf.rule is vyos_defined %}
{%                 for rule_id, rule_conf in conf.rule.items() if rule_conf.disable is not vyos_defined %}
        {{ rule_conf | nft_rule('NAM', name_text, rule_id, 'ip6') }}
{%                     if rule_conf.recent is vyos_defined %}
{%                         set ns.sets = ns.sets + ['NAM_' + name_text + '_' + rule_id] %}
{%                     endif %}
{%                 endfor %}
{%             endif %}
        {{ conf | nft_default_rule(name_text, ipv6=True) }}
    }
{%         endfor %}

{%         for set_name in ip6_fqdn %}
    set FQDN_{{ set_name }} {
        type ipv6_addr
        flags interval
    }
{%         endfor %}
{%         for set_name in ns.sets %}
    set RECENT6_{{ set_name }} {
        type ipv6_addr
        size 65535
        flags dynamic
    }
{%         endfor %}
{%         if geoip_updated.ipv6_name is vyos_defined %}
{%             for setname in geoip_updated.ipv6_name %}
    set {{ setname }} {
        type ipv6_addr
        flags interval
    }
{%             endfor %}
{%         endif %}
{%     endif %}
{% endif %}

{{ group_tmpl.groups(group, True) }}

{% if zone is vyos_defined %}
{{ zone_tmpl.zone_chains(zone, state_policy is vyos_defined, True) }}
{% endif %}

{% if state_policy is vyos_defined %}
    chain VYOS_STATE_POLICY6 {
{%     if state_policy.established is vyos_defined %}
        {{ state_policy.established | nft_state_policy('established') }}
{%     endif %}
{%     if state_policy.invalid is vyos_defined %}
        {{ state_policy.invalid | nft_state_policy('invalid') }}
{%     endif %}
{%     if state_policy.related is vyos_defined %}
        {{ state_policy.related | nft_state_policy('related') }}
{%     endif %}
        return
    }
{% endif %}
}
